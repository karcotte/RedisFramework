<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedisConnectionSamples</name>
    </assembly>
    <members>
        <member name="T:RedisConnectionSamples.ApplicationLogging">
            <summary>
            Class <c>ApplicationLogging</c> provides a sample Microsoft.Extensions.Logging implementation configured to write to console and windows event log.
            </summary>
        </member>
        <member name="P:RedisConnectionSamples.ApplicationLogging.Factory">
            <summary>
            Property <c>Factory</c> provides a logger factory implementation that allows the rest of the applicaiton to use the configured logging implementation.
            </summary>
        </member>
        <member name="T:RedisConnectionSamples.ConflictException">
            <summary>
            Class <c>ConflictException</c> An exception representing that a resource change was detected. Used when implementing an optimistic locking mechanism.
            </summary>
        </member>
        <member name="M:RedisConnectionSamples.ConflictException.#ctor(System.String)">
            <summary>
            This constructor implements the exception with the given message.
            </summary>
            <param name="message">A message describing the error.</param>
        </member>
        <member name="M:RedisConnectionSamples.ConflictException.#ctor(System.String,System.Exception)">
            <summary>
            This constructor implements the exception with the given message and inner exception.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="inner">An inner exception containing a stack trace indicating the root cause of this error.</param>
        </member>
        <member name="T:RedisConnectionSamples.DataDocument">
            <summary>
            Class <c>DataDocument</c> models a document containing data that can be persisted in Redis.
            </summary>
        </member>
        <member name="F:RedisConnectionSamples.DataDocument.dataMap">
            <summary>
            Instance variable <c>dataMap</c> represents the backing dictionary holding the document's data.
            </summary>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.#ctor">
            <summary>
            This constructor initializes a new empty DataDocument.
            </summary>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            This constructor initializes a new DataDocument backed by the 
            (<paramref name="dataMap"/>).
            </summary>
            <param name="dataMap"> is the new DataDocument's backing dictionary.</param>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.#ctor(System.Byte[])">
            <summary>
            This constructor initializes a new DataDocument with the values contained in the incoming 
            (<paramref name="jsonValue"/>).
            </summary>
            <param name="jsonValue"> is the DataDocument's UTF-8 encoded JSON representation.</param>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.Set(System.String,System.Object)">
            <summary>
            This method saves the (<paramref name="value"/>) to the (<paramref name="field"/>) field in the DataDocument. 
            If a value or values already exists in the DataDocument at that field, the new value replaces the old value(s)
            </summary>
            <param name="field"> is the DataDocument field that the (<paramref name="value"/>) will be saved to.</param>
            <param name="value"> will be saved to the (<paramref name="field"/>) field.</param>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.Add(System.String,System.Object)">
            <summary>
            This method adds the (<paramref name="value"/>) to the (<paramref name="field"/>) field in the DataDocument.
            If a value or values already exists in the DataDocument at that field, the new value is appended to the old value(s).
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.Add(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            This method adds the (<paramref name="value"/>) to the (<paramref name="field"/>) field in the DataDocument.
            If a value or values already exist in the DataDocument at that field, the values contained in the
            (<paramref name="value"/>) are appended to the old value(s). 
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.GetFirstValue(System.String)">
            <summary>
            This method retrieves the first value in the DataDocument stored in the (<paramref name="field"/>) field.
            </summary>
            <param name="field"> is the field to retrieve the first value from.</param>
            <returns>The first value stored at the field in the DataDocument or null if the field doesn't exist.</returns>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.GetFirstValue(System.String,System.Object)">
            <summary>
            This method retrieves the first value in the DataDocument stored in the <paramref name="field"/> field.
            </summary>
            <param name="field"> is the field to retireve the first value from.</param>
            <param name="defaultValue"> is the default value to return when the document does not contain a value at <paramref name="field"/>.</param>
            <returns>The first value stored at the field in the DataDocument or <paramref name="defaultValue"/> if the field doesn't exist.</returns>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.GetFirstValueAsString(System.String)">
            <summary>
            This method retrieves the string representation of the first value in the DataDocument stored in the <paramref name="field"/> field.
            </summary>
            <param name="field"> is the field to retrieve the first value from.</param>
            <returns>The string representation of the first value stored at the field in the DataDocument or null if the field doesn't exist.</returns>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.GetFirstValueAsString(System.String,System.String)">
            <summary>
            This method retrieves the string representation of the first value in the DataDocument stored in the <paramref name="field"/> field.
            </summary>
            <param name="field"> is the field to retrieve the first value from.</param>
            <param name="defaultValue"> is the default value to return when the document does not contain a value at <paramref name="field"/>.</param>
            <returns>The string representation of the first value stored at the field in the DataDocument or <paramref name="defaultValue"/> if the field doesn't exist.</returns>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.GetValues(System.String)">
            <summary>
            This method retrieves all of the values in the DataDocument stored in the <paramref name="field"/> field.
            </summary>
            <param name="field"> is the field to retrieves the values from.</param>
            <returns>The values stored at the field or an empty IEnumerable if the field doesn't exist.</returns>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.ToString">
            <summary>
            This method returns a string representation of the DataDocument. Is a UTF-8 encoded JSON string representation of the backing Dictionary.
            </summary>
            <returns>The string representation of DataDocument.</returns>
        </member>
        <member name="M:RedisConnectionSamples.DataDocument.ToRedisValue">
            <summary>
            This method converts the DataDocument into a <c>RedisValue</c> that can be persisted in Redis.
            </summary>
            <returns>A <c>RedisValue</c> representation of this DataDocument that can be persisted in Redis. </returns>
        </member>
        <member name="T:RedisConnectionSamples.Location">
            <summary>
            Class <c>Location</c> models a part of a key used within a schema to store documents.
            </summary>
        </member>
        <member name="F:RedisConnectionSamples.Location.indices">
            <summary>
            Instance variable representing the indice parts of the location which can later be searched for with a pattern.
            </summary>
        </member>
        <member name="P:RedisConnectionSamples.Location.Length">
            <summary>
            Property <c>Length</c> represents the number of indices present in the Location.
            </summary>
        </member>
        <member name="M:RedisConnectionSamples.Location.#ctor(System.String[])">
            <summary>
            This constructor initializes the location with the indices in the <paramref name="indices"/> array.
            </summary>
            <param name="indices">The string array used to intialize the location.</param>
        </member>
        <member name="M:RedisConnectionSamples.Location.op_Implicit(System.String)~RedisConnectionSamples.Location">
            <summary>
            Converts a string into a location.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:RedisConnectionSamples.Location.op_Implicit(System.String[])~RedisConnectionSamples.Location">
            <summary>
            Converts a string array into a location.
            </summary>
            <param name="indices"></param>
        </member>
        <member name="M:RedisConnectionSamples.Location.op_Implicit(System.Int32)~RedisConnectionSamples.Location">
            <summary>
            Converts an integer into a location.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:RedisConnectionSamples.Location.op_Implicit(System.Int32[])~RedisConnectionSamples.Location">
            <summary>
            Converts an integer array into a location.
            </summary>
            <param name="indices"></param>
        </member>
        <member name="M:RedisConnectionSamples.Location.ToString">
            <summary>
            This method returns a string representation of the location.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedisConnectionSamples.RedisConnection">
            <summary>
            Class <c>RedisConnection</c> provides the framework with a means of accessing a configured connection to communicate with a redis database. Connection is determined by the
            "connection_string" environment variable.
            
            See Also: https://stackexchange.github.io/StackExchange.Redis/Configuration
            </summary>
        </member>
        <member name="P:RedisConnectionSamples.RedisConnection.Connection">
            <summary>
            Property <c>Connection</c> is a lazy initialized singleton StackExchange.Redis ConnectionMultiplexer used by the framework to communicate with a Redis database.
            </summary>
        </member>
        <member name="M:RedisConnectionSamples.RedisHashPersistenceLayer.Put(System.String,RedisConnectionSamples.Location,RedisConnectionSamples.DataDocument,System.Nullable{System.TimeSpan})">
            <summary>
            This method saves a single DataDocument to Redis at a <c>Location</c> within a particular schema. The Redis Key where the document
            is saved is determined as <code>schemaId:location</code>. All writes are "last write wins" when multiple writes to the same key are made at the same time.
            
            Best practice is for all locations used within a "schemaId" to follow the same pattern.
            </summary>
            <param name="schemaId">The id representing the schema where the document will be stored.</param>
            <param name="location">The location within the schema where the document will be stored.</param>
            <param name="doc">The <c>DataDocument</c> to persist in Redis.</param>
            <param name="expiration">The TTL for the key -> document pair. Defaults to null, indicating that there will not be a TTL.</param>
            <returns>A Task to track the asynchronous operation.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisHashPersistenceLayer.Get(System.String,RedisConnectionSamples.Location)">
            <summary>
            This method retrieves a document from Redis.
            </summary>
            <param name="schemaId">The id representing the schema where the document is stored.</param>
            <param name="location">The location within the schema where the document is stored.</param>
            <returns>A Task to track the asynchronous retrieval operation.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisHashPersistenceLayer.Get(System.String,RedisConnectionSamples.Location,System.String[])">
            <summary>
            This method retrieves a document from Redis.
            </summary>
            <param name="schemaId">The id representing the schema where the document is stored.</param>
            <param name="location">The location within the schema where the document is stored.</param>
            <returns>A Task to track the asynchronous retrieval operation.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisHashPersistenceLayer.PutSync(System.String,RedisConnectionSamples.Location,RedisConnectionSamples.DataDocument,System.Nullable{System.TimeSpan})">
            <summary>
            This method saves a single DataDocument to Redis at a <c>Location</c> within a particular schema. The Redis Key where the document
            is saved is determined as <code>schemaId:location</code>. All writes are "last write wins" when multiple writes to the same key are made at the same time.
            
            Best practice is for all locations used within a "schemaId" to follow the same pattern.
            </summary>
            <param name="schemaId">The id representing the schema where the document will be stored.</param>
            <param name="location">The location within the schema where the document will be stored.</param>
            <param name="doc">The <c>DataDocument</c> to persist in Redis.</param>
            <param name="expiration">The TTL for the key -> document pair. Defaults to null, indicating that there will not be a TTL.</param>
            <returns>A Task to track the asynchronous operation.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisHashPersistenceLayer.GetSync(System.String,RedisConnectionSamples.Location)">
            <summary>
            This method retrieves a document from Redis.
            </summary>
            <param name="schemaId">The id representing the schema where the document is stored.</param>
            <param name="location">The location within the schema where the document is stored.</param>
            <returns>A Task to track the asynchronous retrieval operation.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisHashPersistenceLayer.GetSync(System.String,RedisConnectionSamples.Location,System.String[])">
            <summary>
            This method retrieves a document from Redis.
            </summary>
            <param name="schemaId">The id representing the schema where the document is stored.</param>
            <param name="location">The location within the schema where the document is stored.</param>
            <returns>A Task to track the asynchronous retrieval operation.</returns>
        </member>
        <member name="T:RedisConnectionSamples.RedisPersistenceLayer">
            <summary>
            Class <c>RedisPersistenceLayer</c> provides an API for persisting DataDocuments in Redis.
            </summary>
        </member>
        <member name="M:RedisConnectionSamples.RedisPersistenceLayer.Put(System.String,RedisConnectionSamples.Location,RedisConnectionSamples.DataDocument,System.Nullable{System.TimeSpan})">
            <summary>
            This method saves a single DataDocument to Redis at a <c>Location</c> within a particular schema. The Redis Key where the document
            is saved is determined as <code>schemaId:location</code>. All writes are "last write wins" when multiple writes to the same key are made at the same time.
            
            Best practice is for all locations used within a "schemaId" to follow the same pattern.
            </summary>
            <param name="schemaId">The id representing the schema where the document will be stored.</param>
            <param name="location">The location within the schema where the document will be stored.</param>
            <param name="doc">The <c>DataDocument</c> to persist in Redis.</param>
            <param name="expiration">The TTL for the key -> document pair. Defaults to null, indicating that there will not be a TTL.</param>
            <returns>A Task to track the asynchronous operation.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisPersistenceLayer.PutSync(System.String,RedisConnectionSamples.Location,RedisConnectionSamples.DataDocument,System.Nullable{System.TimeSpan})">
            <summary>
            This method saves a single DataDocument to Redis at a <c>Location</c> within a particular schema. The Redis Key where the document
            is saved is determined as <code>schemaId:location</code>. All writes are "last write wins" when multiple writes to the same key are made at the same time.
            
            This is a blocking implementation, for non-blocking callers use "Put".
            
            Best practice is for all locations used within a "schemaId" to follow the same pattern.
            </summary>
            <param name="schemaId">The id representing the schema where the document will be stored.</param>
            <param name="location">The location within the schema where the document will be stored.</param>
            <param name="doc">The <c>DataDocument</c> to persist in Redis.</param>
            <param name="expiration">The TTL for the key -> document pair. Defaults to null, indicating that there will not be a TTL.</param>        
        </member>
        <member name="M:RedisConnectionSamples.RedisPersistenceLayer.Put(System.String,System.Collections.Generic.KeyValuePair{RedisConnectionSamples.Location,RedisConnectionSamples.DataDocument}[])">
            <summary>
            This method saves multiple DataDocuments to Redis at their corresponding <c>Location</c> within a particular schema. The Redis Key where the document[i]
            is saved is determined as <code>schemaId:location[i]</code>. All writes are "last write wins" when multiple writes to the same key are made at the same time.
            
            Best practice is for all locations used wihin a "schemaId" to follow the same pattern.
            </summary>
            <param name="schemaId">The id representing the schema where the document will be stored.</param>
            <param name="pairs">An array of location -> document pairs to be stored within the schema.</param>        
            <returns>A Task to track the asynchronous operation.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisPersistenceLayer.PutSync(System.String,System.Collections.Generic.KeyValuePair{RedisConnectionSamples.Location,RedisConnectionSamples.DataDocument}[])">
            <summary>
            This method saves multiple DataDocuments to Redis at their corresponding <c>Location</c> within a particular schema. The Redis Key where the document[i]
            is saved is determined as <code>schemaId:location[i]</code>. All writes are "last write wins" when multiple writes to the same key are made at the same time.
            
            This is a blocking implementaiton, for non-blocking callers use "Put".
            
            Best practice is for all locations used wihin a "schemaId" to follow the same pattern.
            </summary>
            <param name="schemaId">The id representing the schema where the document will be stored.</param>
            <param name="pairs">An array of location -> document pairs to be stored within the schema.</param>        
            <returns>A Task to track the asynchronous operation.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisPersistenceLayer.Get(System.String,RedisConnectionSamples.Location)">
            <summary>
            This method retrieves a document from Redis.
            </summary>
            <param name="schemaId">The id representing the schema where the document is stored.</param>
            <param name="location">The location within the schema where the document is stored.</param>
            <returns>A Task to track the asynchronous retrieval operation.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisPersistenceLayer.GetSync(System.String,RedisConnectionSamples.Location)">
            <summary>
            This method retrieves a document from Redis.
            
            This is a blocking implementation, for non-blocking use Get.
            </summary>
            <param name="schemaId">The id representing the schema where the document is stored.</param>
            <param name="location">The location within the schema where the document is stored.</param>
            <returns>A Task to track the asynchronous retrieval operation.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisPersistenceLayer.Find(System.String,RedisConnectionSamples.Location)">
            <summary>
            This method retrieves the Locations within a schema matching a patten.
            </summary>
            <param name="schemaId">The id representing the schema.</param>
            <param name="location">A location pattern used to retrieve locations within the schema where documents are stored.</param>
            <returns>All of the locations within the schema where documents are stored.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisPersistenceLayer.Delete(System.String,RedisConnectionSamples.Location)">
            <summary>
            This method deletes the document stored in Redis at a particular location within a schema.
            </summary>
            <param name="schemaId">The id representing the schema.</param>
            <param name="location">The location within the schema holding the document to be deleted.</param>
            <returns>A Task to track the asynchronous operation.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisPersistenceLayer.acquireLock(System.String,System.String,System.TimeSpan)">
            <summary>
            This method allows the caller to attempt to acquire a lock represented by setting a key in redis. Can only be set if the key
            does not already contain a value. Can be used for a pessimistic lock implementaiton.
            
            See also: https://redis.io/topics/distlock
            </summary>
            <param name="key">The key representing a lock</param>
            <param name="token">A token known only to this caller, other callers will not be able to extend or remove the lock because they do not possess the token.</param>
            <param name="expiration">The TTL for the lock.</param>
            <returns>True if the lock was aquired, otherwise false.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisPersistenceLayer.extendLock(System.String,System.String,System.TimeSpan)">
            <summary>
            This method allows the caller to extend the TTL for a lock that it already possess. The token must match the existing token stored in Redis at the key.
            </summary>
            <param name="key">The key representing the lock.</param>
            <param name="token">The token known only to the initial acquirer of the lock. Must be correct for the lock to be released.</param>
            <param name="expiration">The new TTL for the lock.</param>
            <returns>True if the lock was extended, otherwise false.</returns>
        </member>
        <member name="M:RedisConnectionSamples.RedisPersistenceLayer.releaseLock(System.String,System.String)">
            <summary>
            This method allows the caller to release a lock so that other callers can acquire it.
            </summary>
            <param name="key">The key representing the lock.</param>
            <param name="token">The token known only to the initial acquirer of the lock. Must be correct for the lock to be released.</param>
            <returns>True if the lock was released, otherwise false.</returns>
        </member>
        <member name="T:RedisConnectionSamples.RetryHelper">
            <summary>
            Class <c>RetryHelper</c> provides an asynchronous mechanism for retrying an execution that accesses a transient resource.
            </summary>
        </member>
        <member name="M:RedisConnectionSamples.RetryHelper.RetryOnExceptionAsync(System.Int32,System.Func{System.Threading.Tasks.Task})">
            <summary>
            This method retries an operation until it is successful or until the number of attempts is exceeded. 
            This implementation only retries for certain exceptions. When the underlying operation throws a 
            <c>RedisException</c>, or <c>SocketException</c> the operation will be tried again. Any other error 
            will be rethrown without additional attempts.
            </summary>
            <param name="times">The number of attempts allowed.</param>
            <param name="operation">The operation to retry.</param>
            <returns></returns>
        </member>
        <member name="M:RedisConnectionSamples.RetryHelper.RetryOnException(System.Int32,System.Action)">
            <summary>
            This method retries an operation until it is successful or until the number of attempts is exceeded. 
            This implementation only retries for certain exceptions. When the underlying operation throws a 
            <c>RedisException</c>, or <c>SocketException</c> the operation will be tried again. Any other error 
            will be rethrown without additional attempts. This is a synchronous / blocking implementation, for non-blocking
            calls use RetryOnExceptionAsync.
            </summary>
            <param name="times">The number of attempts allowed.</param>
            <param name="operation">The operation to retry.</param>
            <returns></returns>
        </member>
    </members>
</doc>
